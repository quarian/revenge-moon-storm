<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<style>
.code { font-family: monospace; }
</style>
<title>AS-0.3302 Project document</title>
</head>

<body>

<div style="text-align: center">
<h3>AS-0.3302 - project document</h3>
<h1>Revenge of the Moon &mdash; The Gathering Storm</h1>
</div>

<h3>Authors:</h3>

<table>
<tr>
<td>84745F</td>
<td>Miro Nurmela</td>
<td><a href="miro.nurmela@aalto.fi">miro.nurmela@aalto.fi</a></td>
</tr>
<tr>
<td>290658</td>
<td>Henri Niva</td>
<td><a href="henri.niva@aalto.fi">henri.niva@aalto.fi</a></td>
</tr>
<tr>
<td>84312L</td>
<td>Joonas Lipping</td>
<td><a href="joonas.lipping@aalto.fi">joonas.lipping@aalto.fi</a></td>
</tr>
<tr>
<td>78740E</td>
<td>Roope Savolainen</td>
<td><a href="roope.savolainen@aalto.fi">roope.savolainen@aalto.fi</a></td>
</tr>
</table>

<h3>Last updated: </h3>

<p>09.12.2013</p>

<h2>Instructions for compiling and use</h2>

Lorem ipsum dolor sit amet, motherfucker
<!--
<p>In this chapter you must tell which platform(s) and operating system(s) your program supports.
How it can be compiled (and installed) ie. which tools are needed to compile the program and which commands to use.
</p>

<p>You must also tell what your program does and how it can be used. You must also add some
example of program runs (example inputs and outputs and/or screenshots or something like that).</p>

<p>Add here the manual of your program.</p>

<p><b>This part is important. If the assistant can not understand how to compile and/or use your program by
reading these instructions, your project will most propably be failed.</b></p>
-->

<h2>Program architechture</h2>

<!-- In this chapter you must describe the main architechture of your program. You <b>must draw</b> clear diagrams
of your program structure. You don't need to go in to the details, but this chapter should give the reader
the idea of the architechture of your program. You must also tell, why you decided to use the architechture you used. -->

<p>
The architecture of RotM is conceptually divided, roughly speaking, into three domains.
An administrative system manages resources and handles state transitions.
The map architecture manages the grid-based game levels
along with the associated map objects: player characters, monsters and items.
The world controller drives the game loop on a given game level.
It can be thought of as a bridge between the administrative system and the map architecture,
because in some sense it belongs in both domains.
</p>

<h3>The administrative system</h3>

<p>
The entire program is contained within a single <span class="code">Game</span> object.
When it is constsructed, it initializes an
<span class="code">EventManager</span>, a
<span class="code">GraphicsManager</span> and a
<span class="code">TerrainManager</span>.
It makes all three available for other parts of the program throughout its operation.
(The program also makes use of a <span class="code">MapObjectManager</span>,
which is stateless and can therefore just be represented as a two-function namespace
that is globally available (as namespaces are).
The graphics, terrain, and map object managers are resource managers.
The event manager's function is to handle input events (keyboard commands and window events).
</p>

<p>
After the <span class="code">Game</span> object has taken care of its initial housekeeping,
its member function <span class="code">Game::main()</span> is run.
Excluding game and manager object destructors, this function drives the rest of the program.
The different game states, represented by <span class="code">GameState</span> objects,
form a state stack structure.
When the game starts, a <span class="code">MainMenu</span> state is pushed onto the stack and starts receiving input.
Depending on the user's input, it can spawn a number of different states,
such as <span class="code">CampaignGame</span> and <span class="code">MultiplayerGame</span>.
When such a state is spawned, it gets pushed onto the state stack and becomes the active state.
It remains active until it either spawns another state and transfers control to it,
or terminates and returns control to the state that spawned it.
When the last element on the stack terminates and gets popped, the program terminates &mdash;
that is, when the main menu exits, so does the program.
</p>

<img src="gamestates.svg" width="1000px" />

<h3>The world controller</h3>

<p>

</p>

<h3>The map architecture</h3>

<h2>Data structures and algorithms</h2>

<p>In this chapter you must describe the data structures and algorithms used in your program. Dont't put
your code here, but describe the data structures and algorithms using natural language (you can also add pictures).</p>

<h2>Known bugs</h2>

<p>In this chapter you must tell all known bugs in your code. You must also tell what could have been done better.</p>

<p>If the assistant finds bug(s) in your code that you haven't mentioned, it is very bad thing and your points will be
decreased. And if your code segfaults, it is even worse and your points will be decreased more...</p>

<h2>Tasks sharing and schedule</h2>

<p>In this chapter you must tell how the task sharing and communication inside the group worked.
You must also tell the real schedule and amount of work done by each group member. You are also encouraged to describe the amount of work of each different part you your project. (planning, implementation of different areas of project, testing and documentation etc.)</p>

<p>Think and tell also, if you could have shared tasks better. What went wrong compared to the schedule of your original
plan and why.</p>

<h2>Differences to the original plan</h2>

<p>In this chapter you must tell what is done in different way that was originally planned and why.</p>

<p>Do you think your plan was good enough, super, or should you have planned your program better?</p>

<h2>References</h2>

<p>In this chapter you must tell all the references you have used during your project.</p>

</body>
</html>

